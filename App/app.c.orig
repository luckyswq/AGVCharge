/**
  ******************************************************************************
  * @文件名     ： app.c
  * @作者       ： FelixWu
  * @版本       ： V1.0.0
  * @日期       ： 2019年11月14日
  * @摘要       ： 应用程序源文件
  ******************************************************************************/
/*----------------------------------------------------------------------------
  更新日志:
   - 2019-03-02 V1.0.0: 初始版本
  ----------------------------------------------------------------------------*/
/* 包含的头文件 --------------------------------------------------------------*/
#include "app.h"
#include "bsp.h"
#include "bsp_usart.h"
#include "bsp_timer.h"
#include "task.h"

#include "nvidiacom_app.h"
#include "nvidiacom_drv.h"
#include "watchdog_app.h"
#include "led_app.h"

/* 静态申明 ------------------------------------------------------------------*/
static void APP_Init(void);
static void APP_Task(void *pvParameters);

//任务优先级
#define RUNTIMESTATS_TASK_PRIO	4
//任务堆栈大小
#define RUNTIMESTATS_STK_SIZE 	128
//任务句柄
TaskHandle_t RunTimeStats_App_Task_Handler;
//任务函数
void RunTimeStats_task(void *pvParameters);

char RunTimeInfo[1600];		//保存任务运行时间信息


/************************************************
函数名称 ： AppTaskCreate
功    能 ： 创建任务
参    数 ： 无
返 回 值 ： 无
作    者 ： FelixWu
*************************************************/
void AppTaskCreate(void)
{
    BaseType_t xReturn;

    /* 创建应用程序(开始任务) */
    xReturn = xTaskCreate(APP_Task, "APP_Task", APP_STACK_SIZE, NULL, APP_TASK_PRIORITY, NULL);
    if(pdPASS != xReturn)
    {
        printf("APP_Task create failed");
        return;                                      //创建任务失败
    }
}

/************************************************
函数名称 ： APP_Init
功    能 ： 应用程序初始化
参    数 ： 无
返 回 值 ： 无
作    者 ： FelixWu
*************************************************/
static void APP_Init(void)
{
	printf("APP_Init()\r\n");
    Nvidiacom_App_Init();
    Led_App_Init();
    WatchDog_App_Init();
		RunTimeStatsTaskCreate();
    USART_Cmd(NVIDIA_COM, ENABLE);
}

/************************************************
函数名称 ： APP_Task
功    能 ： 应用程序(开始任务)
参    数 ： pvParameters --- 可选参数
返 回 值 ： 无
作    者 ： FelixWu
*************************************************/
static void APP_Task(void *pvParameters)
{
    BSP_Init();                                    //底层驱动初始化
    APP_Init();                                    //应用程序初始化

    for(;;)
    {
        vTaskDelay(100);
//        LED_TOGGLE();                                //LED闪烁
    }
}

void vApplicationStackOverflowHook( TaskHandle_t xTask, signed char *pcTaskName )
{

    printf("任务：%s 发现栈溢出\r\n", pcTaskName);

}

////query任务函数
//void query_task(void *pvParameters)
//{
//	u32 TotalRunTime;
//	UBaseType_t ArraySize,x;
//	TaskStatus_t *StatusArray;
//
//	//第一步：函数uxTaskGetSystemState()的使用
//	printf("/********第一步：函数uxTaskGetSystemState()的使用**********/\r\n");
//	ArraySize=uxTaskGetNumberOfTasks();		//获取系统任务数量
//	StatusArray=pvPortMalloc(ArraySize*sizeof(TaskStatus_t));//申请内存
//	if(StatusArray!=NULL)					//内存申请成功
//	{
//		ArraySize=uxTaskGetSystemState((TaskStatus_t* 	)StatusArray, 	//任务信息存储数组
//									   (UBaseType_t		)ArraySize, 	//任务信息存储数组大小
//								       (uint32_t*		)&TotalRunTime);//保存系统总的运行时间
//		printf("TaskName\t\tPriority\t\tTaskNumber\t\t\r\n");
//		for(x=0;x<ArraySize;x++)
//		{
//			//通过串口打印出获取到的系统任务的有关信息，比如任务名称、
//			//任务优先级和任务编号。
//			printf("%s\t\t%d\t\t\t%d\t\t\t\r\n",
//					StatusArray[x].pcTaskName,
//					(int)StatusArray[x].uxCurrentPriority,
//					(int)StatusArray[x].xTaskNumber);
//
//		}
//	}
//	vPortFree(StatusArray);	//释放内存
//	printf("/**************************结束***************************/\r\n");
//	printf("按下KEY_UP键继续!\r\n\r\n\r\n");
////	while(KEY_Scan(0)!=WKUP_PRES) delay_ms(10);		//等待KEY_UP键按下
//
//	//第二步：函数vTaskGetInfo()的使用
//	TaskHandle_t TaskHandle;
//	TaskStatus_t TaskStatus;
//
//	printf("/************第二步：函数vTaskGetInfo()的使用**************/\r\n");
//	TaskHandle=xTaskGetHandle("led0_task");			//根据任务名获取任务句柄。
//	//获取LED0_Task的任务信息
//	vTaskGetInfo((TaskHandle_t	)TaskHandle, 		//任务句柄
//				 (TaskStatus_t*	)&TaskStatus, 		//任务信息结构体
//				 (BaseType_t	)pdTRUE,			//允许统计任务堆栈历史最小剩余大小
//			     (eTaskState	)eInvalid);			//函数自己获取任务运行壮态
//	//通过串口打印出指定任务的有关信息。
//	printf("任务名:                %s\r\n",TaskStatus.pcTaskName);
//	printf("任务编号:              %d\r\n",(int)TaskStatus.xTaskNumber);
//	printf("任务壮态:              %d\r\n",TaskStatus.eCurrentState);
//	printf("任务当前优先级:        %d\r\n",(int)TaskStatus.uxCurrentPriority);
//	printf("任务基优先级:          %d\r\n",(int)TaskStatus.uxBasePriority);
//	printf("任务堆栈基地址:        %#x\r\n",(int)TaskStatus.pxStackBase);
//	printf("任务堆栈历史剩余最小值:%d\r\n",TaskStatus.usStackHighWaterMark);
//	printf("/**************************结束***************************/\r\n");
//	printf("按下KEY_UP键继续!\r\n\r\n\r\n");
////	while(KEY_Scan(0)!=WKUP_PRES) delay_ms(10);		//等待KEY_UP键按下
//
//	//第三步：函数eTaskGetState()的使用
//	eTaskState TaskState;
//	char TaskInfo[10];
//	printf("/***********第三步：函数eTaskGetState()的使用*************/\r\n");
//	TaskHandle=xTaskGetHandle("query_task");		//根据任务名获取任务句柄。
//	TaskState=eTaskGetState(TaskHandle);			//获取query_task任务的任务壮态
//	memset(TaskInfo,0,10);
//	switch((int)TaskState)
//	{
//		case 0:
//			sprintf(TaskInfo,"Running");
//			break;
//		case 1:
//			sprintf(TaskInfo,"Ready");
//			break;
//		case 2:
//			sprintf(TaskInfo,"Suspend");
//			break;
//		case 3:
//			sprintf(TaskInfo,"Delete");
//			break;
//		case 4:
//			sprintf(TaskInfo,"Invalid");
//			break;
//	}
//	printf("任务壮态值:%d,对应的壮态为:%s\r\n",TaskState,TaskInfo);
//	printf("/**************************结束**************************/\r\n");
//	printf("按下KEY_UP键继续!\r\n\r\n\r\n");
////	while(KEY_Scan(0)!=WKUP_PRES) delay_ms(10);		//等待KEY_UP键按下
//
//	//第四步：函数vTaskList()的使用
//	printf("/*************第三步：函数vTaskList()的使用*************/\r\n");
//	vTaskList(InfoBuffer);							//获取所有任务的信息
//	printf("%s\r\n",InfoBuffer);					//通过串口打印所有任务的信息
//	printf("/**************************结束**************************/\r\n");
//	while(1)
//	{
//		LED0=~LED0;
//        vTaskDelay(1000);                           //延时1s，也就是1000个时钟节拍
//	}
//}




//RunTimeStats任务
void RunTimeStats_task(void *pvParameters)
{
    while(1)
    {
        memset(RunTimeInfo,0,1600);				//信息缓冲区清零
//		vTaskGetRunTimeStats(RunTimeInfo);		//获取任务运行时间信息
//        vTaskList(RunTimeInfo);		//获取任务运行时间信息
////		printf("任务名\t\t\t运行时间\t运行所占百分比\r\n");
//        printf("Name\t\tState\tPrior\tStack\tNum\r\n");
//        printf("%s\r\n",RunTimeInfo);

//		memset(RunTimeInfo,0,1600);				//信息缓冲区清零
        vTaskGetRunTimeStats(RunTimeInfo);		//获取任务运行时间信息
        printf("Name\t\t\tTime\tPercent\r\n");
        printf("Name\t\tState\tPrior\tStack\tNum\r\n");
        printf("%s\r\n",RunTimeInfo);
        vTaskDelay(2000);                           	//延时10ms，也就是1000个时钟节拍

//		TaskStatus_t TaskStatus;

    }
}

/************************************************
函数名称 ： RunTimeStatsTaskCreate
功    能 ： 创建任务
参    数 ： 无
返 回 值 ： 无
作    者 ： FelixWu
*************************************************/
void RunTimeStatsTaskCreate(void)
{
    BaseType_t xReturn;

    /* 创建应用程序(开始任务) */
    xReturn = xTaskCreate(RunTimeStats_task, "RunTimeStats_Task", RUNTIMESTATS_STACK_SIZE, NULL, RUNTIMESTATS_TASK_PRIORITY, &RunTimeStats_App_Task_Handler);
    if(pdPASS != xReturn)
    {
        printf("RunTimeStats_Task create failed");
        return;                                      //创建任务失败
    }
}


/**** Copyright (C)2019 FelixWu. All Rights Reserved **** END OF FILE ****/
